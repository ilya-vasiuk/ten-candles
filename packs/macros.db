{"_id":"276LbnD68qJpEfTj","name":"Ten Candles","type":"script","author":"ugvmfDci2BbDFcl5","img":"icons/sundries/lights/candles-lit-red-evil.webp","scope":"global","command":"/* TEN CANDLES\n*/\n\nasync function toggleLight(lightIds, lightStatus = 'toggle') {\n    if (lightStatus === 'toggle') {\n        lightStatus = canvas.lighting.placeables[canvas.lighting.placeables.findIndex(light => light.id === lightIds[0])].document.hidden;\n    }\n\n    let candleCount = parseInt(canvas.drawings.placeables[canvas.drawings.placeables.findIndex(drawing => drawing.id === candleCountId)].document.text);\n    if (lightStatus) {\n        candleCount = candleCount + 1;\n    } else {\n        candleCount = candleCount - 1;\n    }\n    canvas.lighting.updateAll({hidden: !lightStatus}, (light => lightIds.includes(light.id)));\n    canvas.drawings.updateAll({text: candleCount}, (drawing => drawing.id === candleCountId));\n}\n\nlet candleCountId = '2ru6zPY7s96Nf1oI';\nlet candles = [\n    [\"XUPTh4rT6iM2IH6h\",\"CbFMbnPk12K7ZPWU\"],\n    [\"6YE9S50sHciN2HHj\",\"43U9wUydN9rf5y9v\"],\n    [\"4LtRBthYK3Yv0PoX\",\"KKs6jupYdEWpdWEt\"],\n    [\"9zJEqE3IfGpmfYPA\",\"SzFybV75900CVteF\"],\n    [\"RnuJBSyPKfoxMV9u\",\"0XAQ42ZGrYz2HuUT\"],\n    [\"Gcl9vsbwXZT2Kayh\",\"daF9FaAXm4nhfOzp\"],\n    [\"MtLp5ZerEWBPkL2A\",\"JOCACVmAPgi946PQ\"],\n    [\"5qy3z9XGOqs1C8aN\",\"WkIZ6io8z8XBiZE5\"],\n    [\"XMxZRti0ZH7nM1T8\",\"KMXOFV1GwHpC2rmg\"],\n    [\"ADIgSBglENlsWljJ\",\"PP6XWuSLiXw3jhOw\"]\n];\nlet bowl = [\"TlN6Vd0IbZ4JUXUS\",\"p8tV1sHQgpnKqYGX\",\"0SU38BAtAayGA7ID\"]\n\nlet d = new Dialog({\n    title: 'Ten Candles - Light Control',\n    buttons: {\n        candleButton01: {\n            label: '01',\n            callback: () => {\n                toggleLight(candles[0]);\n                d.render(true);\n            }\n        },\n        candleButton02: {\n            label: '02',\n            callback: () => {\n                toggleLight(candles[1]);\n                d.render(true);\n            }\n        },\n        candleButton03: {\n            label: '03',\n            callback: () => {\n                toggleLight(candles[2]);\n                d.render(true);\n            }\n        },\n        candleButton04: {\n            label: '04',\n            callback: () => {\n                toggleLight(candles[3]);\n                d.render(true);\n            }\n        },\n        candleButton05: {\n            label: '05',\n            callback: () => {\n                toggleLight(candles[4]);\n                d.render(true);\n            }\n        },\n        candleButton06: {\n            label: '06',\n            callback: () => {\n                toggleLight(candles[5]);\n                d.render(true);\n            }\n        },\n        candleButton07: {\n            label: '07',\n            callback: () => {\n                toggleLight(candles[6]);\n                d.render(true);\n            }\n        },\n        candleButton08: {\n            label: '08',\n            callback: () => {\n                toggleLight(candles[7]);\n                d.render(true);\n            }\n        },\n        candleButton09: {\n            label: '09',\n            callback: () => {\n                toggleLight(candles[8]);\n                d.render(true);\n            }\n        },\n        candleButton10: {\n            label: '10',\n            callback: () => {\n                toggleLight(candles[9]);\n                d.render(true);\n            }\n        },\n        bowl: {\n            label: 'Bowl',\n            callback: () => {\n                toggleLight(bowl);\n                d.render(true);\n            }\n        },\n        resetCandles: {\n            label: 'Reset Candles',\n            callback: () => {\n                candles.forEach(c => {\n                    toggleLight(c, true);\n                    //canvas.lighting.updateAll({hidden: false}, (light => c.includes(light.id)));\n                });\n                canvas.drawings.updateAll({text: '10'}, (drawing => drawing.id === candleCountId))\n                d.render(true);\n            }\n        },\n\n    },\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"ugvmfDci2BbDFcl5":3},"flags":{"core":{"sourceId":"Macro.276LbnD68qJpEfTj"},"scene-packer":{"sourceId":"Macro.276LbnD68qJpEfTj"}}}
{"_id":"4CySLfUAz7AUKo9o","name":"Dice Pool","type":"script","author":"ugvmfDci2BbDFcl5","img":"icons/sundries/gaming/dice-pair-white-green.webp","scope":"global","command":"/* DICE POOL\n*/\n\nlet playerDiceCountId = 'KSonnDd7CnBOuF2I';\nlet gmDiceCountId = 'CUo0X0jXWTR5Je7E';\nlet candleCountId = '2ru6zPY7s96Nf1oI';\n\n\nlet poolDrawings = [playerDiceCountId, gmDiceCountId];\n\nlet d = new Dialog({\n    title: 'Ten Candles - Dice Pool',\n    buttons: {\n        removeDie: {\n            label: 'Remove Player Die',\n            callback: ()     => {\n                let playerDiceCountDrawing = canvas.drawings.placeables[canvas.drawings.placeables.findIndex(drawing => drawing.id === playerDiceCountId)];\n                let playerDiceCount = parseInt(playerDiceCountDrawing.document.text);\n                let gmDiceCountDrawing = canvas.drawings.placeables[canvas.drawings.placeables.findIndex(drawing => drawing.id === gmDiceCountId)];\n                let gmDiceCount = parseInt(gmDiceCountDrawing.document.text);\n                canvas.drawings.updateAll({text: playerDiceCount-1}, (drawing => (drawing.id === playerDiceCountId)));\n                canvas.drawings.updateAll({text: gmDiceCount+1}, (drawing => (drawing.id === gmDiceCountId)));\n                d.render(true);\n            }\n        },\n        resetPool: {\n            label: 'Reset Player Pool',\n            callback: () => {\n                let playerDiceCountDrawing = canvas.drawings.placeables[canvas.drawings.placeables.findIndex(drawing => drawing.id === playerDiceCountId)];\n                let playerDiceCount = parseInt(playerDiceCountDrawing.document.text);\n                let gmDiceCountDrawing = canvas.drawings.placeables[canvas.drawings.placeables.findIndex(drawing => drawing.id === gmDiceCountId)];\n                let gmDiceCount = parseInt(gmDiceCountDrawing.document.text);\n                let candleCountDrawing = canvas.drawings.placeables[canvas.drawings.placeables.findIndex(drawing => drawing.id === candleCountId)];\n                let candleCount = parseInt(candleCountDrawing.document.text);\n\n                canvas.drawings.updateAll({text: candleCount}, (drawing => (drawing.id === playerDiceCountId)));\n                canvas.drawings.updateAll({text: (10-candleCount)}, (drawing => (drawing.id === gmDiceCountId)));\n                d.render(true);\n\n            }\n        }\n    }\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"ugvmfDci2BbDFcl5":3},"flags":{"core":{"sourceId":"Macro.4CySLfUAz7AUKo9o"},"scene-packer":{"sourceId":"Macro.4CySLfUAz7AUKo9o"}}}
{"_id":"UyPk2hJdY4sIYEgY","name":"Roll Player Dice","type":"script","author":"ugvmfDci2BbDFcl5","img":"icons/sundries/lights/torch-brown-lit.webp","scope":"global","command":"/* ROLL PLAYER DICE\n*/\n\nasync function tenCandlesRoll(blnHope) {\n\n    let dicepoolPlayer = 'KSonnDd7CnBOuF2I';\n    let dicepoolGM = 'CUo0X0jXWTR5Je7E';\n    let diceCountPlayers = parseInt(canvas.drawings.placeables[canvas.drawings.placeables.findIndex(drawing => drawing.id === dicepoolPlayer)].document.text);\n    let diceCountGM = parseInt(canvas.drawings.placeables[canvas.drawings.placeables.findIndex(drawing => drawing.id === dicepoolGM)].document.text);\n\n    let hopeSuccess = 0;\n    let playerSuccesses = 0;\n    let gmSuccesses = 0;\n    let playerFailures = 0;\n    let gmFailures = 0;\n    let rollMessage = '';\n    let narrator = 'GM';\n\n    let rollPlayers = await new Roll(`${diceCountPlayers}d6`).evaluate({ async : true });\n    let rollGM = await new Roll(`${diceCountGM}d6`).evaluate({ async : true });\n\n    if (blnHope) {\n        console.log('Rolling Hope');\n        let rollHope = await new Roll('1d6').evaluate({ async : true });\n        if (rollHope.terms[0].results[0].result >= 5) {\n            playerSuccesses+=1;\n        }\n        await rollHope.toMessage({ rollMode : 'publicroll', flavor: 'Hope Roll'});\n    }\n\n    rollPlayers.terms[0].results.forEach(r => {\n      if (r.result === 1) { playerFailures+=1 }\n      if (r.result === 6) { playerSuccesses+=1 }\n    })\n\n    rollGM.terms[0].results.forEach(r => {\n      if (r.result === 1) { gmFailures+=1 }\n      if (r.result === 6) { gmSuccesses+=1 }\n    })\n\n    if (playerSuccesses === 0) {\n      rollMessage = `, but hope is consumed.<br><strong>FAILURE</strong>`;\n    } else {\n      rollMessage = `, and keeps it at bay.<br><strong>SUCCESS</strong>`;\n    }\n\n    if ((gmSuccesses >= playerSuccesses) && (playerSuccesses >= 1)) {\n      rollMessage = `, but it creeps ever closer.<br><strong>SUCCESS</strong>`;\n    }\n\n    if (playerSuccesses > gmSuccesses) {\n        narrator = 'PLAYERS';\n    }\n\n    let statsMessage = `<p>\n        Player rolled: <strong>${playerSuccesses}</strong> successes.<br>\n        GM rolled: <strong>${gmSuccesses}</strong> successes.<br>\n        Players rolled: <strong>${playerFailures}</strong> ones.</p>`;\n    let flavor = `<p>Light pushes against the darkness${rollMessage}</p>${statsMessage}<p>Narration goes to: <strong>${narrator}</strong></p>`;\n\n    // ChatMessage.create({content: flavor});\n\n    await rollPlayers.toMessage({ rollMode : 'publicroll', flavor});\n    // await rollPlayers.toMessage({ rollMode : 'publicroll'});\n    // await rollGM.toMessage({ rollMode : 'gmroll'});\n}\n\nlet d = Dialog.confirm({\n    title: 'Have you lived your moment',\n    content: '<p>Do you have a <em>Hope Die</em></p>',\n    yes: () => tenCandlesRoll(true),\n    no: () => tenCandlesRoll(false),\n    defaultYes: false\n});","folder":null,"sort":0,"permission":{"default":0,"ugvmfDci2BbDFcl5":3},"flags":{"core":{"sourceId":"Macro.UyPk2hJdY4sIYEgY"},"scene-packer":{"sourceId":"Macro.UyPk2hJdY4sIYEgY"}}}
